<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is a masterpiece, build over many years. Every part has a
     carefully thought-out reason for existing with the exact names and
     parameters, as given. If you try to "fix" it or "simplify" it, you
     will likely break something. -->

<!-- Ant is used instead of Maven or Gradle because both Maven and Gradle
     are hideously slow on older machines like a Mac PowerBook G4 or Sun
     Ultra 5. Ant is more than 2X faster and the Ant code is more than 2X
     simpler, shorter and easier to understand. The only thing that Maven
     would offer is dependency management. But there is only one dependency
     so Maven is just an annoying nuisance for this purpose.
     
     Also, Maven can't build a DMG that works on both old and new Macs.
     Ant is required for that.
     
     A Maven directory layout is maintained for consistency with other
     projects. -->

<!-- This DOCTYPE tag shuts off the warning from Eclipse that there is no DTD
     associated with this XML file. -->

<!DOCTYPE project>

<project name="rune" default="all" basedir=".">

    <property environment="env"/>

    <!--
    **************************************************************************
    *                                                                        *
    *               Increment release.version before releasing               *
    *        Match it will the github version in the github release          *
    *                                                                        *
    **************************************************************************
    -->
    <property name="release.version" value="2.0.0"/> <!-- Match Github version -->

    <property name="app.formal.name" value="Rune"/>
    <property name="app.technical.name" value="${ant.project.name}"/>
    <property name="vendor" value="Altered Mechanism"/>
    <property name="src.dir" value="src/main/java"/>
    <property name="build.dir" value="target"/>
    <property name="cls.dir" value="${build.dir}/classes"/>
    <property name="main.class" value="com.alteredmechanism.rune.Rune"/>
    <property name="run.lib.dir" value="lib/run"/>
    <property name="build.lib.dir" value="lib/build"/>
    <property name="app" value="${build.dir}/Rune.app"/>
    <property name="dmg" value="${build.dir}/Rune.dmg"/>
    <property name="zip" value="${build.dir}/Rune.zip"/>
    <property name="dmg.setup.dir" value="${build.dir}/Rune"/>
    <property name="font.install.script"
              value="${dmg.setup.dir}/Install Free Programming Fonts"/>
    <property name="fonts.dir" value="src/periphery/fonts"/>
    <property name="izpack.root" value="${build.dir}/izpack"/>
    <property name="izpack.app.dir" value="appfiles"/>
    <property name="common.manifest" value="${build.dir}/common-manifest.txt"/>
    <property name="dependent.manifest" value="${build.dir}/dependent-manifest.txt"/>
    <property name="uber.manifest" value="${build.dir}/uber-manifest.txt"/>
    <!-- Might need a better location, but the name is corrected from the Ant default.
         It automatically populates the property build.number -->
    <property name="build.number.file" value="src/build-number.txt"/> 
    <property name="portable.zip" value="${build.dir}/rune-portable.zip"/> 
    <property name="portable.zip.dir" value="${build.dir}/rune-portable"/>
    <property name="periphery.scripts.dir" value="src/periphery/scripts"/>

    <!-- Define One-Jar JAR location which is used to load the one-jar tastdef. -->
    <property name="one-jar.jar" value="${build.lib.dir}/one-jar-ant-task-0.97.jar"/>

    <!-- The following naming proposal should only affect executable jars, not
         regular library jars. It is to differentiate between a self-contained
         executable jar and an executable jar that still has its dependencies
         outside itself. A jar without a ~something appended to the name can
         be assumed to be a library jar that is not executable and has
         no dependencies included, like those uploaded to Maven Central.
         -->

    <!-- The tilde is necessary so you can tell that the following word is not
         part of the application name. Dashes separate words in the application
         name. So those cannot be used. It is the best separator. A dot would
         indicate a file type, which it is not. It is just an adjective. Other
         symbols either look terrible or are not allowed in UN*X or Windows
         file names.

         Nonautonomous jar name possibilities:

         wallpaper-switcher~nonautonomous.jar - way too long and hard to pronounce
         wallpaper-switcher~dependent.jar - because it has dependencies
         wallpaper-switcher~isolated.jar  - isolated from its dependencies
         wallpaper-switcher~slim.jar      - opposite of fat
         wallpaper-switcher~simple.jar    - opposite of uber, kind of
         -->
    <property name="dependent.jar.shortname"
              value="${ant.project.name}~dependent.jar"/>
    <property name="dependent.jar"
              value="${build.dir}/${dependent.jar.shortname}"/>

    <!-- A better description than "uber", or "fat" or "executable" would be
         self-contained. But it is very long. Also, "autonomous" would be good,
         except that it is long:

         wallpaper-switcher~autonomous.jar     - best captures function and data
         wallpaper-switcher~self-contained.jar - doesn't describe exec
         wallpaper-switcher~uber.jar           - doesn't describe exec or
                                                 autonomous
         wallpaper-switcher~fat.jar            - doesn't describe exec or
                                                 autonomous
         wallpaper-switcher~exe.jar            - same as exec below
         wallpaper-switcher~exec.jar           - good but misses autonomous
                                                 meaning
                                                 because exec jar could have
                                                 dependent jars outside itself -->

    <!-- This is the uber jar. Consider changing the name. -->
    <property name="jar.shortname"
              value="${ant.project.name}.jar"/>
    <property name="jar"
              value="${build.dir}/${jar.shortname}"/>

    <!-- The location of this jar is very bad, but that is what izPack 
         requires.  -->
    <property name="xdg.desktop.menu.jar"
              value="${build.dir}/xdg-desktop-menu.jar"/>

    <!-- Allows us to use the IzPack Ant task, standalone-compiler.jar added
         to Ant lib
         -->
<!--    <taskdef name="izpack"-->
<!--             classpath="${build.lib.dir}/izpack-standalone-compiler-4.3.5.jar"-->
<!--             classname="com.izforge.izpack.ant.IzPackTask"/>-->

    <taskdef name="izpack"
             classpath="${build.lib.dir}/izpack-standalone-compiler-4.3.5.jar"
             classname="com.izforge.izpack.ant.IzPackTask"/>

    <!-- It is better to put the taskdef directly here instead of using the
         include file as the documentation suggests. The include file is
         contained inside the jar file. So, then it is necessary to extract
         the jar file to get to the include file. So now you need both the
         extracted include file and the jar file, or the extracted jar
         contents.
         This gets messy. Just keep the jar file jarred and use the taskdef
         here. Intellij is then able to find the classname at least, which
         it couldn't do with everything extracted. But, it still can't
         recognize the one-jar task...doh!
         -->
    <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask"
             classpath="${one-jar.jar}" onerror="report"/>

    <fileset id="dependency.jar.set" dir="${run.lib.dir}">
        <include name="**/*"/>
    </fileset>

    <path id="jar.runtime.classpath">
        <fileset dir="${run.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <path id="dependency.jars">
        <fileset refid="dependency.jar.set"/>
    </path>

    <path id="beanshell.classpath">
        <fileset dir="${build.lib.dir}">
            <!-- The bsf jar provides the javax.script (JSR-223)
                 implementation for Java less than 6. This app targets
                 Java 5, so bsf is good to have. -->
            <include name="bsf-api-3.1.jar"/>
            <!-- This is the beanshell interpreter. -->
            <include name="bsh-2.0b6.jar"/>
        </fileset>
    </path>

    <!-- I've abandoned the following technique for the RUNE_COMPILER and
         RUNE_JAVA_VERSION environment variables. But, always considering
         better, easier, more consistent with other build methods. This
         is included for thought material. 
         -->

    <!-- If the version is between 1.5 and 1.8, then compile for 1.5, so it
         works on old machines. If not, then just use the runtime java
         version because newer versions can't compile for 1.5. -->
    <!--
    <condition property="target.java.version" value="1.5" 
               else="${java.specification.version}">
        <or>
            <equals arg1="1.5" arg2="${java.specification.version}"/>
            <equals arg1="1.6" arg2="${java.specification.version}"/>
            <equals arg1="1.7" arg2="${java.specification.version}"/>
            <equals arg1="1.8" arg2="${java.specification.version}"/>
            <equals arg1="5" arg2="${java.specification.version}"/>
            <equals arg1="6" arg2="${java.specification.version}"/>
            <equals arg1="7" arg2="${java.specification.version}"/>
            <equals arg1="8" arg2="${java.specification.version}"/>
        </or>
    </condition>
    -->

    <condition property="mac">
        <os family="mac"/>
    </condition>

    <condition property="linux">
        <os name="linux"/>
    </condition>

    <condition property="windows">
        <os family="windows"/>
    </condition>

    <target name="clean" description="Deletes all build artifacts">
        <delete dir="${build.dir}" verbose="true"/>
    </target>

    <target name="compile-setup" description="Sets up for compile">
        <mkdir dir="${cls.dir}"/>
        <buildnumber file="${build.number.file}"/>
        <!-- Build the basic manifest only once so that there are no duplicate
             locations that have to be set for the same values. -->
        <manifest file="${common.manifest}">
            <attribute name="Specification-Title" value="${app.formal.name}"/>
            <attribute name="Specification-Version" value="${release.version}"/>
            <attribute name="Specification-Vendor" value="${vendor}"/>
            <attribute name="Implementation-Title" value="${app.technical.name}"/>
            <attribute name="Implementation-Version" value="build.${build.number}"/>
            <attribute name="Implementation-Vendor" value="${vendor}"/>
        </manifest>
    </target>

    <!-- Hard-coded location of my Java 5 compiler. No longer tested, but could
         be brought back as a legitimate option. -->
    <target name="compile5" depends="compile-setup"
            description="Compiles Java code with hardcoded Java 1.5">
        <javac fork="yes"
               executable="/home/bill/Dropbox/opt/jdk1.5.0/jdk1.5.0_22/bin/javac"
               srcdir="${src.dir}"
               source="1.5"
               target="1.5"
               destdir="${cls.dir}"
               classpath="lib/izpack-standalone-compiler-4.3.5.jar"
               includeantruntime="false"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!-- Hard-coded location of Fedora Linux Java 8 compiler. No longer tested, 
         but could be brought back as a legitimate option. -->
    <target name="compile8" depends="compile-setup"
            description="Compiles with hardcoded Java 1.8, but for 1.5 target">
        <javac fork="yes"
               executable="/usr/lib/jvm/java-1.8.0/bin/javac"
               srcdir="${src.dir}"
               source="1.5"
               target="1.5"
               destdir="${cls.dir}"
               includeantruntime="false"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!-- See the description attribute below -->
    <target name="compile-default-compiler"
            depends="compile-setup"
            unless="env.RUNE_COMPILER"
            description="Compiles with javac found in the PATH (not preferred)">
        <javac srcdir="${src.dir}"
               destdir="${cls.dir}"
               includeantruntime="false"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!-- See the description attribute below -->
    <target name="compile-rune-compiler"
            if="env.RUNE_COMPILER"
            depends="compile-setup"
            description="Compiles with RUNE_COMPILER, RUNE_JAVA_VERSION vars (preferred)">
        <javac fork="yes"
               executable="${env.RUNE_COMPILER}"
               source="${env.RUNE_JAVA_VERSION}"
               target="${env.RUNE_JAVA_VERSION}"
               destdir="${cls.dir}"
               classpath="${build.lib.dir}/izpack-standalone-compiler-4.3.5.jar"
               includeantruntime="false"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <target name="compile"
            depends="compile-setup,compile-rune-compiler,compile-default-compiler"
            description="Chooses either default or rune-compiler targets">
    </target>

    <target name="jar-xdg-desktop-menu-setup"
            depends="compile"
            description="Builds jar for izpack custom install listener">
        <jar destfile="${xdg.desktop.menu.jar}">
            <fileset dir="${cls.dir}">
                <include name="com/alteredmechanism/izpack/**"/>
                <include name="com/alteredmechanism/rune/Executor.class"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class"
                           value="com.alteredmechanism.izpack.XdgDesktopMenu"/>
            </manifest>
        </jar>
    </target>

    <!-- This is not used but kept here because it took a lot of work to
         figure out how to run a custom script as part of the build. If you
         delete it because it's stored in git, then no one will remember it is
         there and it will become useless, wasted work. -->
    <target name="run-a-script" description="Demonstrates how to run a script.">
        <!-- The language has to be lower case or it won't be found. -->
        <script language="beanshell" classpathref="beanshell.classpath">
            // This is the actual script. It's just a demo.
            if (self.getProject().hasReference("jar.runtime.classpath")) {
                System.out.println("Suga");
            } else {
                System.out.println("Bitch");
            }
        </script>
    </target>

    <target name="dependent-jar" depends="compile"
            description="Builds an executable jar that references external jar dependencies">

        <!-- Take the path given by refid as input, send it through the
             flatten mapper to remove any directory prefixes from the jar
             file names, form it into a path string and put the result in
             the given property as output. This allows the property to be 
             used in a "<classpath path=" attribute. Aunt auto-converts the
             slashes and colons/semicolons to the current operating system.
             -->
        <pathconvert refid="jar.runtime.classpath" property="jar.classpath.string">
            <mapper type="flatten"/>
        </pathconvert>

        <!-- Converts a classpath element into a property whose value is 
             appropriate for a Manifest's Class-Path attribute. The jarfile
             is the name of the jar file that will be created. That should
             really not be needed. The property should be enough.
             -->
        <manifestclasspath property="manifest.classpath" 
                           jarfile="${dependent.jar}">
            <classpath path="${jar.classpath.string}"/>
        </manifestclasspath>

        <!-- Start with the common manifest file and then add attributes
             just for this dependent jar.
             -->
        <copy file="${common.manifest}" tofile="${dependent.manifest}" 
              preservelastmodified="true"/>

        <!-- Add attributes for dependent jar -->
        <manifest file="${dependent.manifest}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
            <attribute name="Class-Path" value="${manifest.classpath}"/>
        </manifest>

        <jar destfile="${dependent.jar}" manifest="${dependent.manifest}">
            <fileset dir="${cls.dir}">
                <include name="**"/>
                <!-- No custom izpack classes in application jar. -->
                <exclude name="com/alteredmechanism/izpack/**"/>
            </fileset>
            <fileset dir="src/main/resources" includes="icons/**" excludes="mac"/>
        </jar>
    </target>

    <target name="jar" depends="dependent-jar" description="Builds an uber jar">
        <copy file="${common.manifest}" tofile="${uber.manifest}" 
              preservelastmodified="true"/>

        <manifest file="${uber.manifest}" mode="update">
            <attribute name="One-Jar-Main-Class" value="${main.class}"/>
        </manifest>

        <one-jar destfile="${jar}" manifest="${uber.manifest}">
            <main jar="${dependent.jar}"/>
            <lib>
                <fileset dir="${run.lib.dir}"/>
            </lib>
        </one-jar>
    </target>

    <target name="portable-zip" depends="jar,jar-xdg-desktop-menu-setup" 
            description="Builds zip that requires no installation, for all platforms">
        <mkdir dir="${portable.zip.dir}"/>
        <mkdir dir="${portable.zip.dir}/bin"/>
        <mkdir dir="${portable.zip.dir}/lib"/>
        <copy todir="${portable.zip.dir}/bin" flatten="true" 
              preservelastmodified="true" verbose="true">
            <fileset dir="${periphery.scripts.dir}" includes="**/*"/>
        </copy>
        <copy file="${jar}" todir="${portable.zip.dir}/lib" flatten="true"
              preservelastmodified="true" verbose="true"/>
        <copy file="${xdg.desktop.menu.jar}" 
              todir="${portable.zip.dir}/lib"
              preservelastmodified="true" verbose="true"/>
        <copy todir="${portable.zip.dir}/fonts" preservelastmodified="true" verbose="true">
            <fileset dir="${fonts.dir}" includes="**/*"/>
        </copy>
        <zip basedir="${portable.zip.dir}" destfile="${portable.zip}"/>
    </target>

    <target name="mac-app" depends="jar"
            description="Builds Rune.app directory structure for Mac">
        <delete dir="${app}"/>
        <mkdir dir="${app}/Contents/MacOS"/>
        <mkdir dir="${app}/Contents/Resources/Java"/>
        <copy todir="${app}/Contents/MacOS" preservelastmodified="true"
              verbose="true">
            <fileset file="${periphery.scripts.dir}/rune"/>
            <fileset file="${periphery.scripts.dir}/rune-debug.sh"/>
            <fileset file="${periphery.scripts.dir}/rune-common-functions.sh"/>
            <fileset file="${periphery.scripts.dir}/rune-out-of-mem-err-handler.sh"/>
        </copy>
        <!-- Ant's 'copy' command drops permissions so, they need to be reset
             after each copy. -->
        <chmod perm="ugo+rx" verbose="true">
            <fileset file="${app}/Contents/MacOS/rune"/>
            <fileset file="${app}/Contents/MacOS/rune-debug.sh"/>
            <fileset file="${app}/Contents/MacOS/rune-out-of-mem-err-handler.sh"/>
            <fileset file="${app}/Contents/MacOS/install-fonts.sh"/>
        </chmod>
        <copy file="${jar}" tofile="${app}/Contents/Resources/Java/${jar.shortname}"
              preservelastmodified="true"
              verbose="true"/>
        <copy todir="${app}/Contents/Resources" preservelastmodified="true"
              verbose="true">
            <fileset file="src/main/resources/icons/vegvisir.icns"/>
        </copy>
        <copy todir="${app}/Contents" preservelastmodified="true"
              verbose="true">
            <fileset dir="src/main/resources/mac">
                <include name="Info.plist"/>
                <include name="PkgInfo"/>
            </fileset>
        </copy>
    </target>

    <target name="mac-app-zip" depends="mac-app"
            description="Build a zip file containing the mac app">
        <echo message="A DMG is a Mac-only technology so building a Zip also"/>
        <zip destfile="${zip}">
            <fileset file="${app}"/>
        </zip>
    </target>

    <target name="dmg-on-mac-setup" depends="mac-app"
            description="Setup for building a dmg on a Mac" if="mac">
        <mkdir dir="${dmg.setup.dir}"/>
        <copy todir="${dmg.setup.dir}">
            <fileset dir="${build.dir}" includes="Rune.app/**"/>
            <!-- <fileset file="src/main/resources/mac/Applications"/> -->
        </copy>
        <!-- Ant's 'copy' command drops permissions so, they need to be reset after each 
             copy. -->
        <chmod perm="a+rx" verbose="true">
            <fileset file="${dmg.setup.dir}/Rune.app/Contents/MacOS/rune"/>
            <fileset
                    file="${dmg.setup.dir}/Rune.app/Contents/MacOS/rune-debug.sh"/>
            <fileset
                    file="${dmg.setup.dir}/Rune.app/Contents/MacOS/rune-out-of-mem-err-handler.sh"/>
            <fileset
                    file="${dmg.setup.dir}/Rune.app/Contents/MacOS/install-fonts.sh"/>
        </chmod>
        <copy file="${periphery.scripts.dir}/install-fonts.sh"
              tofile="${font.install.script}"/>
        <chmod file="${font.install.script}" perm="a+rx"/>
        <mkdir dir="${dmg.setup.dir}/Fonts"/>
        <copy todir="${dmg.setup.dir}/Fonts">
            <fileset dir="${fonts.dir}" includes="**"/>
        </copy>
    </target>

    <target name="dmg-on-mac" depends="dmg-on-mac-setup"
            description="Builds a dmg on a Mac" if="mac">
        <exec dir="${build.dir}" executable="hdiutil">
            <arg value="create"/>
            <arg value="-ov"/>
            <!-- Overwrite any existing file -->
            <arg value="-srcfolder"/>
            <arg value="Rune"/>
            <arg value="Rune.dmg"/>
        </exec>
        <!-- This should be "if mac os < catalina" -->
        <exec dir="${build.dir}" executable="hdiutil">
            <arg value="internet-enable"/>
            <arg value="-yes"/>
            <arg value="Rune.dmg"/>
        </exec>
    </target>

    <target name="dmg-on-linux" depends="mac-app" if="linux"
            description="Builds a dmg on a Lignix">
        <touch file="${dmg}"/>
        <echo message="Using dd to zero out ${dmg} file"/>
        <exec dir="${basedir}" executable="dd" failonerror="true">
            <arg value="if=/dev/zero"/>
            <arg value="of=${dmg}"/>
            <arg value="bs=1M"/>
            <arg value="count=10"/>
            <!-- Number of megabytes -->
            <arg value="status=progress"/>
        </exec>
        <!-- Locate the mkfs command. It is in different directories in
             different Linux distros: Fedroika versus Debian. Using the
             find command is necessary because mkfs is not always
             in the PATH. -->
        <exec executable="find" outputproperty="mkfs" searchpath="true">
            <arg value="/bin"/>
            <arg value="/sbin"/>
            <arg value="/usr/bin"/>
            <arg value="/usr/sbin"/>
            <arg value="-name"/>
            <arg value="mkfs"/>
            <arg value="-print"/>
            <arg value="-quit"/>
        </exec>
        <!-- Check if mkfs was found. It was not found if the find
             command produced no output. Checking the exit code
             does not work for find because find always returns 0
             unless there was an error. A failure to find something
             is not considered an error. -->
        <fail>
            <condition>
                <equals arg1="${mkfs}" arg2=""/>
            </condition>
            Failed to find mkfs.

            Can't build dmg file system because mkfs was not found.
            To find it, try: whereis mkfs. And then update the
            paths to search in the find command above.
        </fail>
        <echo message="mkfs found at ${mkfs}"/>
        <dirname file="${mkfs}" property="mkfs.dir"/>
        <!-- Create the hfs+ file system on the dmg file. -->
        <echo message="Creating hfs+ file system on ${dmg}"/>
        <exec dir="${basedir}" executable="${mkfs}" searchpath="true"
              resultproperty="mkfs.hfsplus.result" failonerror="false">
            <!-- mkfs's directory must be in the PATH because the
                 PATH is used by mkfs to find mks.hfsplus. -->
            <env key="PATH" value="${env.PATH}:${mkfs.dir}"/>
            <arg value="-t"/>
            <arg value="hfsplus"/>
            <arg value="-v"/>
            <arg value="Rune"/>
            <arg value="${dmg}"/>
        </exec>
        <!-- Detect failure of mkfs.hfsplus -->
        <fail>
            <condition>
                <not>
                    <equals arg1="${mkfs.hfsplus.result}" arg2="0"/>
                </not>
            </condition>
            Failed to create hfs+ file system for dmg.

            You may need to install the appropriate hfs+ file system 
            package:
            
                Fedora:

                    sudo dnf install hfsplus-tools

                Ubuntu:

                    sudo apt install hfsprogs

                Debian:
                    
                    # First enable non-free repos in /etc/sources.list.
                    sudo apt install hfsprogs

            This will also fail if it is running inside a snap or flatpak
            Intellij because they are sandboxed and therefore can't access
            /sbin/mkfs or /usr/bin/mkfs.
        </fail>
        <mkdir dir="target/dmg-mount"/>
        <echo>Mounting ${dmg}. Superuser privileges are required.</echo>
        <exec dir="${basedir}" executable="sudo" failonerror="true">
            <!-- SUDO_ASKPASS is necessary because Ant is not a terminal
                 program and therefore sudo can't prompt for a password.
                 ssh-askpass is a graphical program that can prompt for
                 a password. It is in /usr/bin on Fedora and Ubuntu. If
                 it is not installed, then install the openssh-askpass
                 package. -->
            <env key="SUDO_ASKPASS" value="/usr/bin/ssh-askpass"/>
            <arg value="mount"/>
            <arg value="--verbose"/>
            <arg value="-o"/>
            <arg value="loop"/>
            <arg value="${dmg}"/>
            <arg value="target/dmg-mount"/>
        </exec>
        <exec dir="${build.dir}" executable="sudo" failonerror="true">
            <arg value="chown"/>
            <arg value="-R"/>
            <arg value="${user.name}:${user.name}"/>
            <arg value="dmg-mount"/>
        </exec>
        <copy todir="${build.dir}/dmg-mount" verbose="true">
            <fileset dir="${build.dir}">
                <include name="Rune.app/**"/>
            </fileset>
        </copy>
        <!-- Ant's 'copy' command drops permissions so, they need to be reset after each copy. -->
        <chmod perm="a+rx" verbose="true">
            <fileset file="${build.dir}/dmg-mount/Rune.app/Contents/MacOS/rune"/>
            <fileset file="${build.dir}/dmg-mount/Rune.app/Contents/MacOS/rune-debug.sh"/>
            <fileset file="${build.dir}/dmg-mount/Rune.app/Contents/MacOS/rune-out-of-mem-err-handler.sh"/>
        </chmod>

        <exec dir="${build.dir}" executable="sudo" failonerror="true">
            <arg value="umount"/>
            <arg value="--verbose"/>
            <arg value="dmg-mount"/>
        </exec>
    </target>

    <target name="dmg" depends="dmg-on-mac,dmg-on-linux,mac-app-zip"
            description="Builds a dmg, a Mac install file"/>

    <target name="izpack-setup" depends="jar,jar-xdg-desktop-menu-setup">
        <mkdir dir="${izpack.root}"/>
        <copy todir="${izpack.root}">
            <fileset dir="src/main/izpack" includes="**"/>
        </copy>

        <!-- Copy scripts into izpack deployment directory. -->
        <mkdir dir="${izpack.root}/${izpack.app.dir}/bin"/>
        <copy todir="${izpack.root}/${izpack.app.dir}/bin">
            <fileset dir="${periphery.scripts.dir}">
                <include name="rune*"/> <!-- All files starting with rune -->
                <include name="rune-common-functions.sh"/>
                <include name="dtksh-dialog"/>
            </fileset>
        </copy>
        <mkdir dir="${izpack.root}/${izpack.app.dir}/lib"/>
        <copy tofile="${izpack.root}/${izpack.app.dir}/lib/${jar.shortname}"
              file="${jar}"/>
        <copy todir="${izpack.root}/${izpack.app.dir}/lib"
              file="${xdg.desktop.menu.jar}"/>
        <mkdir dir="${izpack.root}/${izpack.app.dir}"/>
        <copy todir="${izpack.root}/${izpack.app.dir}">
            <fileset dir="${basedir}">
                <include name="README.md"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <mkdir dir="${izpack.root}/${izpack.app.dir}/share/icons"/>
        <copy todir="${izpack.root}/${izpack.app.dir}/share/icons">
            <fileset dir="src/main/resources/icons">
                <include name="vegvisir.png"/>
            </fileset>
        </copy>
    </target>

    <target name="izpack" depends="izpack-setup"
            description="Builds an izpack installer jar">
        <!-- Setting compression="deflate" causes
             ClassNotFoundException: java.util.jar.Pack200 
             with some versions of Java. That class was removed in Java 14.
             Earlier versions of Java should have it.
             -->
        <izpack input="src/main/izpack/izpack-main-install-setup.xml"
                output="${build.dir}/rune-installer.jar"
                installerType="standard"
                inheritAll="true"
                compression="deflate"
                basedir="${izpack.root}"
        />
    </target>

    <target name="all" depends="dmg,portable-zip,izpack"/>

    <target name="test" depends="all">
        <java jar="${build.dir}/rune-install.jar" fork="true"/>
    </target>
</project>
