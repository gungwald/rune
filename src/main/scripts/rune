#!/bin/sh

# The application jar file should work without this file. But this file adds
# some features:
# 1. Icon on Mac
# 2. Out-of-memory handler
# 3. Graphical display of stderr
# TODO - Add the rest here...

# Avoid long options, like --tmpdir for mktemp because they are not supported
# on UNIX and BSD.

# Backtick syntax is preferred over $(...) because it works on old systems.

# Locate relevant directories.
APP_NAME=Rune
THIS_SCRIPT=$(basename "$0" .sh)
SCRIPT_DIR=$(dirname "$0") && [ "$SCRIPT_DIR" = "." ] && SCRIPT_DIR=$(pwd)
PARENT_DIR=$(dirname "$SCRIPT_DIR")
LIB_DIR="$PARENT_DIR"/lib
APP_JAR="$LIB_DIR"/"$THIS_SCRIPT"-1.0.jar
OS=$(uname -s)
ON_OUT_OF_MEM_ERR="$SCRIPT_DIR"/rune-out-of-mem-err-handler.sh

. "$SCRIPT_DIR"/common-functions.sh

# Setup fifo so that we can use 'tee' to send stderr to both the console
# and a file. The file will be used to display a window on the desktop
# with the errors it contains after the program exits. This will allow
# a user without visibility to the stderr output in a terminal to see
# any errors.
duplicateStdErr() {
  STDERR_FILE=$(makeTempFile stderr)
  STDERR_FIFO=$(makeTempFile -u fifo)
  mkfifo "$STDERR_FIFO"
  # TODO - Need comment explaining the following trap command
  trap 'removeFiles "$STDERR_FIFO" "$STDERR_FILE"' EXIT
  tee -a "$STDERR_FILE" <"$STDERR_FIFO" >&2 &
}

JAVA=$(findJava)

# Java versions less than 1.6 don't have the OnOutOfMemoryError switch.
if isJavaLessThan_1_6 "$JAVA"; then
  unset ON_OUT_OF_MEM_ERR_SWITCH
else
  ON_OUT_OF_MEM_ERR_SWITCH=-XX:OnOutOfMemoryError="$ON_OUT_OF_MEM_ERR"
fi

if [ "$OS" = 'Darwin' ]; then
  MAC_OPTS="-Xdock:name=$APP_NAME
  # TODO - Need to make this icon available:
  # -Xdock:icon=$RESOURCES_DIR/icons/notepad-64x64.png"
else
  unset MAC_OPTS
fi

# Run
duplicateStdErr
# -Xshare:on is critical but usually on by default...
"$JAVA" $MAC_OPTS "$ON_OUT_OF_MEM_ERR_SWITCH" -jar "$APP_JAR" "$@" 2>"$STDERR_FIFO"
JAVA_EXIT_CODE=$?

if [ -z "$STDERR_FILE" ]; then
  echo STDERR_FILE variable is empty
elif [ -s "$STDERR_FILE" ]; then
  displayErrorFile "$0" "$STDERR_FILE"
elif [ $JAVA_EXIT_CODE -ne 0 ]; then
  cat >"$STDERR_FILE" <<-EOF
The program returned an exit code of $JAVA_EXIT_CODE, which is a failure code.
But it did not produce an error message on the standard error stream.
It is possible that it wrote an error message to the standard output stream,
but that has not been captured. Try running the program from the command line
to get the error message. This is the command to run:
$0 "$@"
EOF
  displayErrorFile "$0" "$STDERR_FILE"
fi
